{"version":3,"sources":["webpack:///./entrypoints/main/src/js/helpers/packageHelper.js","webpack:///./entrypoints/main/src/js/components/form/fields/TextField.jsx","webpack:///./entrypoints/main/src/js/components/form/fields/FormikErrorMessage.jsx","webpack:///./entrypoints/main/src/js/components/form/fields/TextInput.jsx","webpack:///./entrypoints/main/src/js/components/buttons/IconBtn.jsx","webpack:///./entrypoints/main/src/js/helpers/phoneHelper.js","webpack:///./entrypoints/main/src/js/components/ContactForm/LetterAvatar.jsx","webpack:///./entrypoints/main/src/js/components/ContactForm/containers/FormContainer.jsx","webpack:///./entrypoints/main/src/js/components/ContactForm/schemas/contactSchema.js","webpack:///./entrypoints/main/src/js/components/form/fields/PhoneInput.jsx","webpack:///./entrypoints/main/src/js/components/form/fields/SelectInput.js","webpack:///./entrypoints/main/src/js/services/dataService.js","webpack:///./entrypoints/main/src/js/components/AsyncLoader/LoadingIndicator.jsx","webpack:///./entrypoints/main/src/js/components/form/fields/InputFeedback.jsx","webpack:///./entrypoints/main/src/js/components/ContactForm/Header.jsx","webpack:///./entrypoints/main/src/js/components/form/fields/MultiCreatableSelectField.jsx","webpack:///./entrypoints/main/src/js/components/form/SliderColorPicker.jsx","webpack:///./entrypoints/main/src/js/components/ContactForm/Footer.jsx","webpack:///./entrypoints/main/src/js/components/ContactForm/Form.jsx","webpack:///./entrypoints/main/src/js/helpers/findHelper.js"],"names":["getErrorsFromValidationError","validationError","inner","reduce","errors","error","path","yup","validateSync","schema","values","abortEarly","err","console","validate","a","TextField","nextProps","_isEqualWith","this","props","first","second","key","labelElem","htmlInputProps","_merge","inputProps","children","msg","label","labelFor","isValidElement","className","htmlFor","id","classNames","Component","defaultProps","memo","onRender","memoize","errMsg","render","TextInput","disabled","PropTypes","bool","required","autoFocus","type","oneOf","value","string","isRequired","onChange","func","onFocus","onBlur","placeholder","pattern","title","React","PureComponent","IconBtn","elemProps","htmlTag","href","extractCallingCode","callingCode","callingCodeArr","split","countryCode","numb","LetterAvatar","firstLetterElemProps","style","backgroundColor","getCSSColorString","color","onClick","cursor","length","firstLetter","WrappedForm","withFormik","enableReinitialize","mapPropsToValues","contact","toJSON","birth","labels","Array","from","adbk","sampleData","emptyArr","copyVal","contactSchema","getContactSchema","Date","name","formatContactName","emptyObj","status","isDev","logErrorToConsole","yupHelper","handleSubmit","setSubmitting","setErrors","resetForm","val","forEach","__isNew__","toLocaleLowerCase","replace","trim","isNew","e","_isEmpty","onSave","then","displayName","CForm","CFormContainer","handleSave","bind","handleSaveContactForm","handleClose","isOpenInPopup","instanceOf","classes","Contact","defaultContact","fromScratch","phone","_get","extAPI","geolocation","country_code2","calling_code","substr","object","shape","min","max","array","of","nullable","lowercase","matches","email","ensure","phoneNumb","test","match","website","url","date","note","strict","getCallingCodes","countries","isArray","Error","countryCallingCodes","country","callingCodes","flag","alpha2Code","code","push","phoneNumbPrefix","defaultCallingCodes","PhoneInput","_debounce","setState","debouncedUpdateCallingCodes","Infinity","state","nextState","_prepareCountryCodeData","flush","cancel","reportError","getCountriesList","res","isSuccess","data","showNoti","message","stack","callingCodeNumb","newPhone","currentTarget","setFieldValue","flex","width","map","randomUUID","SelectInput","htmlAttrs","options","handleThirdPartyAPIResponse","axiosResponse","alo","get","handleFailedRequest","colorClass","onClose","CreatableMulti","handleChange","newValue","actionMeta","styles","control","provided","borderRadius","isMulti","defaultValue","arrayOf","SliderColorPicker","event","onChangeColor","newColor","prevState","isHideSlider","_isEqual","cloneElement","togglePicker","onChangeComplete","handleChangeComplete","any","element","getRandomHexColor","isSubmitBtnDisabled","memoizedGetFirstLetterOf","firstLetterIdx","search","toUpperCase","defaultLabels","handleChangeColor","handleChangeBirth","handleChangeLabelField","target","isSubmitting","touched","handleBlur","Header","FormikErrorMessage","convertDateObjToHTMLInputVal","MultiCreatableSelectField","InputFeedback","Footer"],"mappings":"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","file":"5.js","sourcesContent":["const getErrorsFromValidationError = (validationError) => {\n  const FIRST_ERROR = 0;\n  return validationError.inner.reduce((errors, error) => {\n    return {\n      ...errors,\n      [error.path]: error.errors[FIRST_ERROR],\n    };\n  }, {});\n};\n\nconst validateSyncViaYup = (schema, values = {}) => {\n  try {\n    schema.validateSync(values, { abortEarly: false });\n    return {};\n  } catch (err) {\n    console.error('SHITTTTT!!!! Error in form validation!', err);\n    return getErrorsFromValidationError(err);\n  }\n};\n\nconst validateViaYup = async (schema, values = {}) => {\n  return schema.validate(values, { abortEarly: false });\n};\n\nexport const yup = {\n  getErrorsFromValidationError,\n  validateSync: validateSyncViaYup,\n  validate: validateViaYup,\n};\n","import React, { memo, isValidElement, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport _merge from 'lodash/merge';\n\nimport TextInput from './TextInput.jsx';\nimport InputFeedback from './InputFeedback.jsx';\n\nclass TextField extends Component {\n  shouldComponentUpdate(nextProps) {\n    if (\n      !_isEqualWith(nextProps, this.props, (first, second, key) => {\n        if (key === 'children') {\n          return true;\n        }\n      })\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  // // eslint-disable-next-line camelcase\n  // UNSAFE_componentWillReceiveProps(nextProps) {\n  //   const diff = {\n  //     curr: {},\n  //     next: {},\n  //   };\n  //   for (const key of Object.keys(nextProps)) {\n  //     if (Object.prototype.hasOwnProperty.call(nextProps, key) && this.props[key] !== nextProps[key]) {\n  //       diff.curr[key] = this.props[key];\n  //       diff.next[key] = nextProps[key];\n  //     }\n  //   }\n  //   if (Object.keys(diff.curr).length) {\n  //     console.group(`${this.props.inputProps.name} componentWillReceiveProps()`);\n  //     console.log('Diff props', diff);\n  //     console.groupEnd();\n  //   }\n  //   return true;\n  // }\n\n  render() {\n    const htmlInputProps = _merge({}, this.props.inputProps, this.props);\n    delete htmlInputProps.inputProps;\n    delete htmlInputProps.children;\n    delete htmlInputProps.msg;\n    delete htmlInputProps.label;\n    delete htmlInputProps.labelFor;\n    let labelElem;\n    if (isValidElement(this.props.label)) {\n      labelElem = this.props.label;\n    } else if (typeof this.props.label === 'string') {\n      labelElem = (\n        <label className=\"\" htmlFor={htmlInputProps.id}>\n          <span className=\"\">{this.props.label}</span>\n        </label>\n      );\n    }\n    return (\n      <div className=\"form-group\">\n        {labelElem}\n        <TextInput\n          {...htmlInputProps}\n          // value={this.props.value}\n          // onChange={this.props.onChange}\n          // onBlur={this.props.onBlur}\n          className={classNames('form-control', this.props.inputProps.className)}\n        />\n        {this.props.msg && <InputFeedback msg={this.props.msg} />}\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nTextField.propTypes = {\n  inputProps: PropTypes.object.isRequired, // should be plain object containing non-dynamic values\n  // value: PropTypes.string.isRequired,\n  // onChange: PropTypes.func.isRequired,\n  // onBlur: PropTypes.func.isRequired,\n  children: PropTypes.element, // input feeback,...\n  msg: PropTypes.string,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]), // set to a string to add default label, or an React element to override the default label\n};\nTextField.defaultProps = {};\n\nexport default memo(TextField);\n","import React, { memo, useEffect } from 'react';\nimport memoize from 'memoize-one';\nimport PropTypes from 'prop-types';\nimport { ErrorMessage } from 'formik';\nimport InputFeedback from './InputFeedback.jsx';\n\nconst onRender = memoize((errMsg) => <InputFeedback msg={errMsg} />); // this func has been moved outside of the component to avoid re-defining while component is being re-rendered\nconst FormikErrorMessage = (props) => {\n  return <ErrorMessage render={onRender} {...props} />;\n};\n\nFormikErrorMessage.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n\nexport default memo(FormikErrorMessage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TextInput extends React.PureComponent {\n  static get propTypes() {\n    return {\n      disabled: PropTypes.bool,\n      required: PropTypes.bool,\n      autoFocus: PropTypes.bool,\n      type: PropTypes.oneOf([\n        'text',\n        'email',\n        'password',\n        'tel',\n        'number',\n        'date',\n        'datetime-local',\n        'search',\n        'time',\n        'url',\n        'week',\n      ]),\n      value: PropTypes.string.isRequired,\n      onChange: PropTypes.func.isRequired,\n      onFocus: PropTypes.func,\n      onBlur: PropTypes.func,\n      id: PropTypes.string,\n      className: PropTypes.string,\n      placeholder: PropTypes.string,\n      pattern: PropTypes.string,\n      title: PropTypes.string,\n    };\n  }\n\n  render() {\n    const props = { ...this.props };\n    delete props.children; // <input/> cannot receive prop `children`\n    return <input {...props} />;\n  }\n}\nTextInput.defaultProps = {\n  type: 'text',\n};\n\nexport default TextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nclass IconBtn extends React.PureComponent {\n  static get propTypes () {\n    return {\n      htmlTag: PropTypes.string,\n      href: PropTypes.string,\n    };\n  }\n\n  render () {\n    // const children = React.cloneElement(this.props.children, {});\n    const elemProps = { ...this.props };\n    // delete elemProps.children;\n    delete elemProps.htmlTag;\n    delete elemProps.href;\n    switch (this.props.htmlTag) {\n    case 'a':\n      return <a {...elemProps} href={this.props.href} className={classNames('btn icon-btn', elemProps.className)} />;\n    default:\n      return <button {...elemProps} className={classNames('btn icon-btn', elemProps.className)} />;\n    }\n  }\n}\n\nexport default IconBtn;\n","export const extractCallingCode = (callingCode) => {\n  const callingCodeArr = callingCode.split('-');\n  return {\n    countryCode: callingCodeArr[0],\n    numb: callingCodeArr[1]\n  };\n};\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { getCSSColorString } from '../../helpers/utilsHelper';\n\nconst LetterAvatar = (props) => {\n  const firstLetterElemProps = {\n    className: 'letter-avt__first-letter',\n    style: {\n      backgroundColor: getCSSColorString(props.color),\n    },\n  };\n  if (typeof props.onClick === 'function') {\n    firstLetterElemProps.onClick = props.onClick;\n    firstLetterElemProps.title = 'Click to choose your preferred color';\n    firstLetterElemProps.style.cursor = 'pointer';\n  }\n  return (\n    <div\n      className={classNames('letter-avt', {\n        [props.className]: props.className.length > 0,\n      })}>\n      <div {...firstLetterElemProps}>\n        <span>{props.firstLetter}</span>\n      </div>\n    </div>\n  );\n};\n\nLetterAvatar.propTypes = {\n  color: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.object.isRequired]).isRequired,\n  onClick: PropTypes.func,\n  firstLetter: PropTypes.string.isRequired,\n  className: PropTypes.string,\n};\n\nLetterAvatar.defaultProps = {\n  className: '',\n};\n\nexport default memo(LetterAvatar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withFormik } from 'formik';\nimport _isEmpty from 'lodash/isEmpty';\nimport _get from 'lodash/get';\n\nimport { formatContactName } from '../../../helpers/utilsHelper';\nimport { fixedEncodeURIComponent, fixedEncodeURI } from '../../../helpers/encodeHelper';\nimport { yup as yupHelper } from '../../../helpers/packageHelper';\nimport getContactSchema from '../schemas/contactSchema';\n\nimport CForm from '../Form.jsx';\n\nconst WrappedForm = withFormik({\n  enableReinitialize: true,\n  mapPropsToValues: (props) => {\n    const values = { ...props.contact.toJSON() };\n    values.birth = props.contact.birth; // Date objects will be convert to String after the above line\n    values.labels = values.labels ? Array.from(values.labels) : adbk.sampleData.emptyArr; // convert Set object to Array\n    return values;\n  },\n  validate: (values, props) => {\n    const copyVal = { ...values };\n    const contactSchema = getContactSchema(copyVal);\n\n    // copyVal.phones =\n    //   !_isEmpty(copyVal.phones) && Array.isArray(copyVal.phones)\n    //     ? copyVal.phones.map((phone) => phone.replace(spacePtrn, ''))\n    //     : [];\n    copyVal.birth = copyVal.birth ? new Date(copyVal.birth) : null;\n    copyVal.name = formatContactName(copyVal.name);\n\n    try {\n      contactSchema.validateSync(copyVal, { abortEarly: false });\n      return adbk.sampleData.emptyObj;\n    } catch (err) {\n      adbk.status.isDev && adbk.logErrorToConsole('SHITTTTT!!!! Error in form validation!', err);\n      return yupHelper.getErrorsFromValidationError(err);\n    }\n  },\n  handleSubmit: (values, { props, setSubmitting, setErrors, resetForm }) => {\n    setSubmitting(true);\n    resetForm();\n\n    const copyVal = (function prepareContactData(val) {\n      val.labels.forEach((label) => {\n        if (label.__isNew__) {\n          label.value = label.value\n            .toLocaleLowerCase()\n            .replace(/[^a-zA-Z0-9]+/g, ' ')\n            .trim()\n            .replace(/\\s/gi, '-');\n          label.isNew = true;\n          delete label.__isNew__;\n        }\n        return label;\n      });\n      val.name = formatContactName(val.name);\n      return val;\n    })({ ...values });\n\n    const contactSchema = getContactSchema(copyVal);\n    let err;\n    try {\n      contactSchema.validateSync(copyVal, { abortEarly: false });\n      err = adbk.sampleData.emptyObj;\n    } catch (e) {\n      err = e;\n    }\n\n    if (!_isEmpty(err)) {\n      setErrors(err);\n    } else {\n      return props.onSave(copyVal).then(() => {\n        setSubmitting(false);\n        // props.handleClose();\n        return null;\n      });\n    }\n  },\n  displayName: 'ContactFormFomikWrapper',\n})(CForm);\n\nclass CFormContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSave = this.handleSave.bind(this);\n  }\n\n  static get propTypes() {\n    return {\n      isOpenInPopup: PropTypes.bool,\n      handleClose: PropTypes.func,\n      title: PropTypes.string.isRequired,\n      contact: PropTypes.instanceOf(adbk.classes.Contact),\n    };\n  }\n\n  static get defaultProps() {\n    const defaultContact = adbk.classes.Contact.fromScratch();\n    defaultContact.phone.callingCode = _isEmpty(_get(adbk, 'extAPI.geolocation'))\n      ? 'VN-84'\n      : adbk.extAPI.geolocation.country_code2 + '-' + adbk.extAPI.geolocation.calling_code.substr(1);\n\n    return {\n      isOpenInPopup: false,\n      contact: defaultContact,\n    };\n  }\n\n  handleSave(values) {\n    // eslint-disable-next-line promise/always-return\n    return adbk.handleSaveContactForm(values).then(() => {\n      this.props.handleClose();\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"form-container\">\n        <WrappedForm {...this.props} onSave={this.handleSave} />\n      </div>\n    );\n  }\n}\n\nexport default CFormContainer;\n","import object from 'yup/lib/object';\nimport string from 'yup/lib/string';\nimport array from 'yup/lib/array';\nimport date from 'yup/lib/date';\n\nexport default (values) => {\n  const contactValidationSchema = object()\n    .shape({\n      name: string()\n        .label('Name')\n        .trim()\n        .min(2)\n        .max(40)\n        .required('This field is required.'),\n      labels: array()\n        .label('Labels')\n        .of(object())\n        .nullable(),\n      // color: object({\n      //   r: Yup\n      //     // .cast()\n      //     .number()\n      //     .min(0)\n      //     .max(255),\n      //   g: Yup\n      //     // .cast()\n      //     .number()\n      //     .min(0)\n      //     .max(255),\n      //   b: Yup\n      //     // .cast()\n      //     .number()\n      //     .min(0)\n      //     .max(255),\n      //   a: Yup\n      //     // .cast()\n      //     .number()\n      //     .min(0)\n      //     .max(1),\n      // }).required(),\n      color: string()\n        .label('Color')\n        .lowercase()\n        .matches(\n          /((^hsl|^rgb)a?\\(\\d{1,3},\\s*\\d{1,3}%?,\\s*\\d{1,3}%?(,\\s*0?\\.?\\d{1,3})?\\)$)|^#([0-9a-z]{3}|[0-9a-z]{6}|[0-9a-z]{8}$)/\n        ) // https://regex101.com/r/lNHe0G/1/tests\n        .required(),\n      email: string()\n        .label('Email')\n        .lowercase()\n        .email(),\n      // phones: array().of(<phone schema below>),\n      phone: object().shape({\n        id: string(),\n        callingCode: string()\n          .ensure()\n          .matches(/[A-Z]{2}-\\d+/g),\n        phoneNumb: string()\n          .label('Phone number')\n          .ensure()\n          .lowercase()\n          .test('phone-number-validator', 'Not a valid phone number', function(val) {\n            return typeof val === 'string' && (val.length === 0 || val.match(/[^\\d\\s]/gi) === null);\n          }),\n      }),\n      website: string()\n        .label('Website')\n        .lowercase()\n        .url()\n        .nullable(),\n      birth: date()\n        .label('Birthday')\n        .max(new Date(), 'Can only select day before today')\n        .nullable(),\n      note: string()\n        .label('Note')\n        .ensure()\n        .strict()\n        .trim('There must not be empty spaces at beginning & end positions')\n        .nullable(),\n    })\n    .required();\n\n  return contactValidationSchema;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SelectInput from './SelectInput';\nimport TextInput from './TextInput.jsx';\nimport { randomUUID } from '../../../helpers/utilsHelper';\nimport { extractCallingCode } from '../../../helpers/phoneHelper';\nimport _isEmpty from 'lodash/isEmpty';\nimport _debounce from 'lodash/debounce';\nimport { getCountriesList } from '../../../services/dataService';\nimport LoadingIndicator from '../../AsyncLoader/LoadingIndicator.jsx';\n\n// helper:\nconst getCallingCodes = (countries = []) => {\n  if (!Array.isArray(countries)) {\n    throw new Error('Data should be an array');\n  }\n  const countryCallingCodes = [];\n  countries.forEach((country) => {\n    const { name, callingCodes, flag, alpha2Code } = country;\n    callingCodes.forEach((code) => {\n      if (code) {\n        countryCallingCodes.push({\n          name,\n          phoneNumbPrefix: code,\n          flag,\n          alpha2Code,\n        });\n      }\n    });\n  });\n  return countryCallingCodes;\n};\nconst defaultCallingCodes = getCallingCodes(); // this will be an empty array\n\nclass PhoneInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      callingCodes: _isEmpty(adbk.extAPI.countryCallingCodes) ? defaultCallingCodes : adbk.extAPI.countryCallingCodes,\n    };\n  }\n\n  static get propTypes() {\n    return {\n      phone: PropTypes.shape({ id: PropTypes.string, callingCode: PropTypes.string, phoneNumb: PropTypes.string })\n        .isRequired, // phone = { id: string, callingCode: string, phoneNumb: string };\n      onBlur: PropTypes.func.isRequired,\n      setFieldValue: PropTypes.func.isRequired,\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.phone !== this.props.phone || nextState.callingCodes !== this.state.callingCodes) return true;\n    return false;\n  }\n\n  componentDidMount() {\n    if (this.state.callingCodes === defaultCallingCodes) {\n      this.debouncedUpdateCallingCodes(); // debounced by \"infinity\" seconds\n\n      this._prepareCountryCodeData()\n        .then((callingCodes) => {\n          this.debouncedUpdateCallingCodes && this.debouncedUpdateCallingCodes.flush(); // this code is still executed after data is fetched, but the task (setState) will not run\n          return callingCodes;\n        })\n        .catch((err) => {\n          this.debouncedUpdateCallingCodes && this.debouncedUpdateCallingCodes.cancel();\n          delete this.debouncedUpdateCallingCodes;\n          adbk.reportError(err);\n        });\n    }\n  }\n\n  componentWillUnmount() {\n    this.debouncedUpdateCallingCodes && this.debouncedUpdateCallingCodes.cancel();\n    delete this.debouncedUpdateCallingCodes;\n  }\n\n  _prepareCountryCodeData() {\n    return getCountriesList()\n      .then((res) => {\n        if (res.isSuccess) {\n          let callingCodes;\n          try {\n            callingCodes = getCallingCodes(res.data);\n          } catch (err) {\n            throw new Error('There is an error. Please report to developer. Thank you!');\n          }\n          adbk.extAPI.countryCallingCodes = callingCodes;\n\n          return callingCodes;\n        } else {\n          throw new Error(res.errMsg);\n        }\n      })\n      .catch((err) => {\n        adbk.showNoti('error', err.message);\n        adbk.reportError(err, err.stack);\n      });\n\n    // const countryCallingCodes = React.lazy(() => import(/* webpackPreload: true */ 'https://restcountries.eu/rest/v2/all'));\n    // adbk.extAPI.countryCallingCodes = countryCallingCodes;\n    // this.setState({\n    //   countryCallingCodes,\n    // });\n  }\n\n  debouncedUpdateCallingCodes = _debounce(() => {\n    // this debouncedUpdateCallingCodes func is only invoked by its flush method (because timeout is Infinity)\n    // when the data is fetched && this component is not unmounted\n    // Reason of doing this way:\n    // there is a chance to unmount this component before its data is fetched,\n    // we need a way to cancel the then() method of resolved promise\n    // (there is no way to cancel a resolved promise in vanilla JS)\n    this.setState(\n      {\n        callingCodes: adbk.extAPI.countryCallingCodes,\n      },\n      () => {\n        delete this.debouncedUpdateCallingCodes;\n      }\n    );\n  }, Infinity);\n\n  render() {\n    const { phone } = this.props;\n    const { callingCodes } = this.state;\n    const callingCodeNumb = extractCallingCode(phone.callingCode).numb;\n    // const defaultCallingCodes = adbk.extAPI.geolocation.country_code2 + '-' + adbk.extAPI.geolocation.calling_code.substr(1);\n    return Array.isArray(callingCodes) && callingCodes.length > 0 ? (\n      <div className=\"input-group\">\n        <>\n          <SelectInput\n            name={`callingCode${phone.id}`}\n            value={phone.callingCode}\n            onChange={(e) => {\n              const newPhone = {\n                ...phone,\n                callingCode: e.currentTarget.value,\n              };\n              this.props.setFieldValue('phone', newPhone, true);\n            }}\n            onBlur={this.props.onBlur}\n            className=\"form-control form__input-field\"\n            style={{\n              flex: '0 0 auto',\n              width: 'auto',\n            }}>\n            {callingCodes.map((country) => {\n              const val = country.alpha2Code + '-' + country.phoneNumbPrefix;\n              return (\n                <option\n                  key={randomUUID()}\n                  value={val}\n                  title={country.name}\n                  className=\"form__select-field__country-options\">\n                  {` ${country.alpha2Code} (+${country.phoneNumbPrefix})`}\n                </option>\n              );\n            })}\n          </SelectInput>\n        </>\n        <TextInput\n          type=\"text\"\n          id=\"inputs__phone\"\n          name={`phoneNumb${phone.id}`}\n          value={(callingCodeNumb ? '+' + callingCodeNumb : '') + phone.phoneNumb}\n          onChange={(e) => {\n            const newPhone = {\n              ...phone,\n              phoneNumb: e.currentTarget.value.substr(callingCodeNumb.length + 1),\n            };\n\n            this.props.setFieldValue('phone', newPhone, true);\n          }}\n          onBlur={this.props.onBlur}\n          className=\"form-control form__input-field\"\n        />\n      </div>\n    ) : (\n      <LoadingIndicator />\n    );\n  }\n}\n\nexport default PhoneInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SelectInput extends React.PureComponent {\n  render () {\n    const htmlAttrs = { ...this.props };\n    delete htmlAttrs.children; // <input/> cannot receive prop `children`\n    delete htmlAttrs.options; // <input/> cannot receive prop `children`\n    return (\n      <select {...htmlAttrs} id={this.props.id}>\n        {this.props.children}\n      </select>\n    );\n  }\n}\n\nSelectInput.propTypes = {\n  required: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  // value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string.isRequired,\n      label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n    })\n  ),\n  children: PropTypes.arrayOf(PropTypes.element),\n  selectedOption: PropTypes.string,\n};\n\nexport default SelectInput;\n","import alo, { handleFailedRequest } from './httpServices';\n\nexport const handleThirdPartyAPIResponse = (axiosResponse) => {\n  // axiosResponse.data contains json responded from our server's routers\n  if (axiosResponse.data) {\n    // this means our query is successfully SENT to our server & has a pre-defined json response\n    return {\n      ...axiosResponse,\n      isSuccess: true, // this means our request has reached the server successfully\n      // data: axiosResponse.data// data sent back from server\n    };\n  } else {\n    // this means the task is failed, not the query\n    return {\n      isSuccess: false,\n      errMsg: 'Sorry! Something is wrong with the third-party APIs :(',\n    };\n  }\n};\n\nexport const getCountriesList = () => {\n  return alo\n    .get('https://restcountries.eu/rest/v2/all')\n    .then(handleThirdPartyAPIResponse)\n    .catch((err) => handleFailedRequest(err, 'Countries list API request is not success!'));\n};\n","import React, { memo } from 'react';\nimport Spinner from '../Spinner/Spinner.jsx';\n\nconst LoadingIndicator = () => (\n  <div className=\"flex-fill d-flex justify-content-center align-items-center h-100\">\n    <Spinner colorClass=\"text-cyan\" />\n  </div>\n);\n\nexport default memo(LoadingIndicator);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst InputFeedback = (props) => {\n  return (\n    <small\n      className={classNames(props.className, {\n        'text-danger': !props.color,\n      })}\n      style={{ color: props.color }}>\n      {props.children || props.msg}\n    </small>\n  );\n};\n\nInputFeedback.propTypes = {\n  className: PropTypes.string,\n  msg: PropTypes.string,\n  color: PropTypes.string,\n  children: PropTypes.element,\n};\n\n// InputFeedback.defaultProps = {};\n\nexport default memo(InputFeedback);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport IconBtn from '../buttons/IconBtn.jsx';\n\nconst CFormHeader = (props) => {\n  return (\n    <header className=\"mb-3 cform__header\">\n      <div className=\"row justify-content-between align-items-center\">\n        <div className=\"col\">\n          <h3 className=\"font-weight-bold form-popup__title\">{props.title}</h3>\n        </div>\n        <div className=\"col-auto\">\n          <IconBtn className=\"d-flex align-items-center justify-content-center\" onClick={props.onClose}>\n            <i className=\"fa fa-times\" />\n          </IconBtn>\n        </div>\n      </div>\n      <div className=\"divider\" />\n    </header>\n  );\n};\n\nCFormHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default memo(CFormHeader);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CreatableSelect from 'react-select/creatable';\n\nclass CreatableMulti extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  static get propTypes() {\n    return {\n      id: PropTypes.string,\n      onChange: PropTypes.func.isRequired,\n      onBlur: PropTypes.func.isRequired,\n      options: PropTypes.arrayOf(PropTypes.object),\n      defaultValue: PropTypes.arrayOf(PropTypes.object),\n      name: PropTypes.string.isRequired,\n      className: PropTypes.string,\n    };\n  }\n\n  handleChange(newValue, actionMeta) {\n    // console.group('Value Changed');\n    // console.log(newValue);\n    // console.log(`action: ${actionMeta.action}`, actionMeta);\n    // console.groupEnd();\n\n    this.props.onChange(newValue);\n  }\n\n  render() {\n    return (\n      <CreatableSelect\n        styles={{\n          control: (provided, state) => ({\n            ...provided,\n            borderRadius: '.7rem',\n          }),\n        }}\n        id={this.props.id}\n        className={this.props.className}\n        name={this.props.name}\n        isMulti\n        onChange={this.handleChange}\n        onBlur={this.props.onBlur}\n        options={this.props.options}\n        defaultValue={this.props.defaultValue}\n      />\n    );\n  }\n}\n\nexport default CreatableMulti;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport _isEqual from 'lodash/isEqual';\nimport SliderPicker from 'react-color/lib/Slider';\nimport { getRandomHexColor } from '../../helpers/utilsHelper';\n\nclass SliderColorPicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: props.color,\n      isHideSlider: true,\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      nextProps.children !== this.props.children ||\n      nextProps.type !== this.props.type ||\n      !_isEqual(nextState, this.state)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  static get propTypes() {\n    return {\n      onChangeColor: PropTypes.func.isRequired,\n      color: PropTypes.any,\n      children: PropTypes.element.isRequired,\n      type: PropTypes.oneOf(['hex', 'rgb', 'hsl', 'hsv']),\n      // passed by HOC CustomPicker:\n      // hex: PropTypes.string,\n      // hsl: PropTypes.object,\n      // rgb: PropTypes.object,\n      // hsv: PropTypes.object,\n      // onChange: PropTypes.func.isRequired,\n    };\n  }\n\n  static get defaultProps() {\n    return {\n      color: getRandomHexColor(),\n      type: 'hex',\n    };\n  }\n\n  handleChangeComplete = (color, event) => {\n    this.setState({ color: color[this.props.type] }, () => {\n      this.props.onChangeColor(this.state.color); // delayed after onChange called because we only want the last value to avoid updating outer form's data too quickly\n    });\n  };\n\n  handleChange = (newColor) => {\n    this.setState({ color: newColor[this.props.type] });\n  };\n\n  togglePicker = (e) => {\n    this.setState((prevState) => {\n      return {\n        isHideSlider: !prevState.isHideSlider,\n      };\n    });\n  };\n\n  render() {\n    const children = React.cloneElement(this.props.children, {\n      className: classNames(this.props.children.props.className, 'mb-3'),\n      onClick: this.togglePicker,\n      // color: this.state.color, // can override here to have instantly visual updates on color, but not overiding will avoid continuesly re-render of child element due to continuesly changed \"color\" prop, because of the way we implement handleChangeComplete() and the fact that the child compoment is receiving \"color\" prop from outer form's data\n    });\n\n    return (\n      <>\n        {children}\n        <div\n          className={classNames('color-picker-ctnr', {\n            'd-none': this.state.isHideSlider,\n          })}>\n          <SliderPicker\n            color={this.state.color}\n            onChange={this.handleChange}\n            onChangeComplete={this.handleChangeComplete}\n          />\n        </div>\n        <p\n          className={classNames('text-center text-gray font-italic d-lg-none', {\n            'd-none': !this.state.isHideSlider,\n          })}>\n          Click to choose your preferred color\n        </p>\n      </>\n    );\n  }\n}\n\n// export default CustomPicker(SliderColorPicker);\nexport default SliderColorPicker;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nconst CFormFooter = (props) => {\n  return (\n    <footer className=\"cform__footer\">\n      <div className=\"mr-auto\">\n        <button className=\"btn btn-secondary\" type=\"reset\">\n          Reset\n        </button>\n      </div>\n      <div className=\"mx-2\">\n        <button className=\"btn btn-primary\" type=\"submit\" disabled={props.isSubmitBtnDisabled}>\n          Submit\n        </button>\n      </div>\n      <div className=\"ml-2\">\n        <button className=\"btn btn-gray\" type=\"button\" onClick={props.onClose}>\n          Cancel\n        </button>\n      </div>\n    </footer>\n  );\n};\n\nCFormFooter.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  isSubmitBtnDisabled: PropTypes.bool.isRequired,\n};\n\nexport default memo(CFormFooter);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport _isEmpty from 'lodash/isEmpty';\nimport { Form } from 'formik';\nimport memoize from 'memoize-one';\n\nimport Header from './Header.jsx';\nimport LetterAvatar from './LetterAvatar.jsx';\nimport TextField from '../form/fields/TextField.jsx';\nimport MultiCreatableSelectField from '../form/fields/MultiCreatableSelectField.jsx';\nimport InputFeedback from '../form/fields/InputFeedback.jsx';\nimport PhoneInput from '../form/fields/PhoneInput.jsx';\nimport SliderColorPicker from '../form/SliderColorPicker.jsx';\nimport { getFirstLetterOf } from '../../helpers/findHelper';\nimport { convertDateObjToHTMLInputVal } from '../../helpers/timeHelper';\nimport Footer from './Footer.jsx';\nimport FormikErrorMessage from '../form/fields/FormikErrorMessage.jsx';\n\nconst memoizedGetFirstLetterOf = memoize(getFirstLetterOf);\n\nconst inputProps = {\n  name: {\n    type: 'text',\n    id: 'input--name',\n    required: true,\n    name: 'name',\n    className: 'form__input-field',\n  },\n  birth: {\n    type: 'date',\n    id: 'input--birth',\n    name: 'birth',\n    className: 'form__input-field',\n    placeholder: 'yyyy-mm-dd',\n  },\n  email: {\n    type: 'email',\n    id: 'input--email',\n    name: 'email',\n    className: 'form__input-field',\n    placeholder: 'hello@garyle.me',\n    title: \"Your URL must start by 'http://'' or 'https://'\",\n  },\n  website: {\n    type: 'url',\n    id: 'input--website',\n    name: 'website',\n    className: 'form__input-field',\n    placeholder: 'https://facebook.com/lvnam96',\n    title: \"Your URL must start by 'http://'' or 'https://'\",\n  },\n  note: {\n    type: 'text',\n    id: 'input--note',\n    name: 'note',\n    className: 'form__input-field',\n    title: \"Your URL must start by 'http://'' or 'https://'\",\n  },\n};\nconst defaultLabels = [\n  {\n    label: 'Coworkers',\n    value: 'coworkers',\n  },\n  {\n    label: 'Family',\n    value: 'family',\n  },\n  {\n    label: 'Friends',\n    value: 'friends',\n  },\n];\n\nclass CForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeColor = this.handleChangeColor.bind(this);\n    // this.addNewPhoneInputField = this.addNewPhoneInputField.bind(this);\n    this.handleChangeBirth = this.handleChangeBirth.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleChangeLabelField = this.handleChangeLabelField.bind(this);\n  }\n\n  handleChangeColor(newColor) {\n    this.props.setFieldValue('color', newColor, true);\n  }\n\n  // addNewPhoneInputField (e) {\n  //   e.stopPropagation();\n  //   const { values } = this.props;\n  //   this.props.setFieldValue(\n  //     'phones',\n  //     [\n  //       ...values.phones,\n  //       {\n  //         id: randomUUID(),\n  //         callingCode: '',\n  //         phoneNumb: '',\n  //       },\n  //     ],\n  //     false // shouldValidate?\n  //   );\n  // }\n\n  handleChangeBirth(e) {\n    const date = e.target.value.length > 0 ? new Date(e.target.value) : null; // check ../schemas/contactSchema.js\n    this.props.setFieldValue('birth', date, true);\n  }\n\n  handleClose(e) {\n    this.props.handleClose();\n  }\n\n  handleChangeLabelField(newValue) {\n    this.props.setFieldValue('labels', newValue, true);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (\n      this.props.isSubmitting !== nextProps.isSubmitting ||\n      this.props.countryCallingCodes !== nextProps.countryCallingCodes ||\n      this.props.values !== nextProps.values ||\n      this.props.touched !== nextProps.touched ||\n      this.props.errors !== nextProps.errors\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    const {\n      values,\n      touched,\n      errors,\n      handleChange,\n      handleBlur,\n      // handleSubmit,\n      // handleReset,\n      isSubmitting,\n      // resetForm,\n      setFieldValue,\n    } = this.props; // extract props from Formik\n    const firstLetter = memoizedGetFirstLetterOf(values.name || '');\n\n    return (\n      <Form className=\"cform\">\n        <Header title={this.props.title} onClose={this.handleClose} />\n        <main className=\"cform__body\">\n          <div className=\"mb-3 cform__avt-ctnr\">\n            <SliderColorPicker type=\"hex\" color={values.color} onChangeColor={this.handleChangeColor}>\n              <LetterAvatar color={values.color} firstLetter={firstLetter} className=\"mb-3\" />\n            </SliderColorPicker>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"col-12 col-md-6\">\n              <TextField\n                inputProps={inputProps.name}\n                value={values.name}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                label=\"Name\"\n                labelFor=\"input--name\">\n                <FormikErrorMessage name=\"name\" />\n              </TextField>\n            </div>\n            <div className=\"col-12 col-md-6\">\n              <TextField\n                inputProps={inputProps.birth}\n                value={values.birth instanceof Date ? convertDateObjToHTMLInputVal(values.birth) : ''}\n                onChange={this.handleChangeBirth}\n                onBlur={handleBlur}\n                label=\"Birth\"\n                labelFor=\"input--birth\">\n                <FormikErrorMessage name=\"birth\" />\n              </TextField>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"\" htmlFor=\"input--labels\">\n              <span className=\"\">Labels</span>\n            </label>\n            <MultiCreatableSelectField\n              id=\"input--labels\"\n              name=\"labels\"\n              defaultValue={values.labels}\n              options={defaultLabels}\n              onChange={this.handleChangeLabelField}\n              onBlur={handleBlur}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"\" htmlFor=\"input--labels\">\n              <span className=\"\">Phone</span>\n            </label>\n            <PhoneInput phone={values.phone} onBlur={handleBlur} setFieldValue={setFieldValue} />\n            {/* <FormikErrorMessage name=\"phone.phoneNumb\" /> */}\n            {errors['phone.phoneNumb'] && <InputFeedback msg={errors['phone.phoneNumb']} />}\n          </div>\n          <div className=\"form-row\">\n            <div className=\"col-12 col-md\">\n              <TextField\n                inputProps={inputProps.email}\n                value={values.email}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                label=\"Email\"\n                labelFor=\"input--email\">\n                <FormikErrorMessage name=\"email\" />\n              </TextField>\n            </div>\n            <div className=\"col-12 col-md\">\n              <TextField\n                inputProps={inputProps.website}\n                value={values.website}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                label=\"Website\"\n                labelFor=\"input--website\">\n                <FormikErrorMessage name=\"website\" />\n              </TextField>\n            </div>\n          </div>\n          <TextField\n            inputProps={inputProps.note}\n            value={values.note}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            label=\"Note\"\n            labelFor=\"input--note\">\n            <FormikErrorMessage name=\"note\" />\n          </TextField>\n        </main>\n        <Footer onClose={this.handleClose} isSubmitBtnDisabled={(touched && !_isEmpty(errors)) || isSubmitting} />\n      </Form>\n    );\n  }\n}\n\nCForm.propTypes = {\n  countryCallingCodes: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      phoneNumbPrefix: PropTypes.string,\n      flag: PropTypes.string,\n      alpha2Code: PropTypes.string,\n    })\n  ),\n  title: PropTypes.string.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  // Formik's props:\n  values: PropTypes.object.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleBlur: PropTypes.func.isRequired,\n  // handleSubmit: PropTypes.func.isRequired,\n  // handleReset: PropTypes.func.isRequired,\n  setFieldValue: PropTypes.func.isRequired,\n  touched: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n  isSubmitting: PropTypes.bool.isRequired,\n};\n\nCForm.defaultProps = {\n  countryCallingCodes: [],\n};\n\nexport default CForm;\n","export const getFirstLetterOf = (name = '') => {\n  if (typeof name === 'string') {\n    let firstLetter = '?';\n    name = name.trim();\n    if (name !== '') {\n      // eslint-disable-next-line no-control-regex\n      const firstLetterIdx = name.search(/[^\\u0000-\\u007F]|[0-9a-zA-Z]/g); // get the first not-special-character in string\n      firstLetter = firstLetterIdx !== -1 ? name[firstLetterIdx].toUpperCase() : firstLetter;\n    }\n    return firstLetter;\n  } else {\n    throw new Error('getFirstLetterOf() required a string as the only argument');\n  }\n};\n"],"sourceRoot":""}